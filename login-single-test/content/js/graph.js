/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 553.0, "minX": 0.0, "maxY": 21177.0, "series": [{"data": [[0.0, 553.0], [0.1, 579.0], [0.2, 599.0], [0.3, 605.0], [0.4, 613.0], [0.5, 631.0], [0.6, 637.0], [0.7, 638.0], [0.8, 652.0], [0.9, 658.0], [1.0, 673.0], [1.1, 675.0], [1.2, 675.0], [1.3, 676.0], [1.4, 676.0], [1.5, 679.0], [1.6, 687.0], [1.7, 698.0], [1.8, 703.0], [1.9, 707.0], [2.0, 709.0], [2.1, 711.0], [2.2, 717.0], [2.3, 725.0], [2.4, 728.0], [2.5, 731.0], [2.6, 739.0], [2.7, 751.0], [2.8, 753.0], [2.9, 760.0], [3.0, 762.0], [3.1, 766.0], [3.2, 767.0], [3.3, 768.0], [3.4, 781.0], [3.5, 784.0], [3.6, 784.0], [3.7, 788.0], [3.8, 789.0], [3.9, 800.0], [4.0, 803.0], [4.1, 809.0], [4.2, 817.0], [4.3, 818.0], [4.4, 838.0], [4.5, 840.0], [4.6, 1664.0], [4.7, 1669.0], [4.8, 1743.0], [4.9, 1756.0], [5.0, 1761.0], [5.1, 1763.0], [5.2, 1767.0], [5.3, 1792.0], [5.4, 1818.0], [5.5, 1826.0], [5.6, 1827.0], [5.7, 1829.0], [5.8, 1833.0], [5.9, 1836.0], [6.0, 1836.0], [6.1, 1840.0], [6.2, 1846.0], [6.3, 1847.0], [6.4, 1857.0], [6.5, 1863.0], [6.6, 1865.0], [6.7, 1889.0], [6.8, 1891.0], [6.9, 1897.0], [7.0, 1912.0], [7.1, 1913.0], [7.2, 1923.0], [7.3, 1924.0], [7.4, 1931.0], [7.5, 1931.0], [7.6, 1939.0], [7.7, 1946.0], [7.8, 1946.0], [7.9, 1950.0], [8.0, 1950.0], [8.1, 1954.0], [8.2, 1957.0], [8.3, 1959.0], [8.4, 1964.0], [8.5, 1966.0], [8.6, 1969.0], [8.7, 1970.0], [8.8, 1970.0], [8.9, 1972.0], [9.0, 1974.0], [9.1, 1975.0], [9.2, 1976.0], [9.3, 1977.0], [9.4, 1978.0], [9.5, 1979.0], [9.6, 1980.0], [9.7, 1983.0], [9.8, 1983.0], [9.9, 1984.0], [10.0, 1991.0], [10.1, 1997.0], [10.2, 2000.0], [10.3, 2003.0], [10.4, 2008.0], [10.5, 2011.0], [10.6, 2013.0], [10.7, 2017.0], [10.8, 2017.0], [10.9, 2025.0], [11.0, 2028.0], [11.1, 2028.0], [11.2, 2029.0], [11.3, 2030.0], [11.4, 2030.0], [11.5, 2043.0], [11.6, 2044.0], [11.7, 2046.0], [11.8, 2049.0], [11.9, 2051.0], [12.0, 2060.0], [12.1, 2060.0], [12.2, 2061.0], [12.3, 2062.0], [12.4, 2062.0], [12.5, 2065.0], [12.6, 2079.0], [12.7, 2079.0], [12.8, 2079.0], [12.9, 2081.0], [13.0, 2082.0], [13.1, 2091.0], [13.2, 2092.0], [13.3, 2093.0], [13.4, 2097.0], [13.5, 2106.0], [13.6, 2107.0], [13.7, 2108.0], [13.8, 2110.0], [13.9, 2113.0], [14.0, 2115.0], [14.1, 2124.0], [14.2, 2124.0], [14.3, 2125.0], [14.4, 2128.0], [14.5, 2131.0], [14.6, 2132.0], [14.7, 2134.0], [14.8, 2135.0], [14.9, 2140.0], [15.0, 2140.0], [15.1, 2140.0], [15.2, 2148.0], [15.3, 2150.0], [15.4, 2154.0], [15.5, 2157.0], [15.6, 2161.0], [15.7, 2167.0], [15.8, 2169.0], [15.9, 2169.0], [16.0, 2174.0], [16.1, 2177.0], [16.2, 2177.0], [16.3, 2188.0], [16.4, 2194.0], [16.5, 2196.0], [16.6, 2204.0], [16.7, 2204.0], [16.8, 2205.0], [16.9, 2206.0], [17.0, 2207.0], [17.1, 2208.0], [17.2, 2209.0], [17.3, 2213.0], [17.4, 2215.0], [17.5, 2217.0], [17.6, 2219.0], [17.7, 2223.0], [17.8, 2228.0], [17.9, 2232.0], [18.0, 2232.0], [18.1, 2237.0], [18.2, 2245.0], [18.3, 2247.0], [18.4, 2250.0], [18.5, 2250.0], [18.6, 2251.0], [18.7, 2252.0], [18.8, 2253.0], [18.9, 2254.0], [19.0, 2259.0], [19.1, 2259.0], [19.2, 2264.0], [19.3, 2265.0], [19.4, 2266.0], [19.5, 2271.0], [19.6, 2275.0], [19.7, 2279.0], [19.8, 2279.0], [19.9, 2280.0], [20.0, 2283.0], [20.1, 2291.0], [20.2, 2291.0], [20.3, 2296.0], [20.4, 2296.0], [20.5, 2299.0], [20.6, 2305.0], [20.7, 2312.0], [20.8, 2318.0], [20.9, 2320.0], [21.0, 2324.0], [21.1, 2325.0], [21.2, 2325.0], [21.3, 2329.0], [21.4, 2329.0], [21.5, 2347.0], [21.6, 2357.0], [21.7, 2358.0], [21.8, 2360.0], [21.9, 2362.0], [22.0, 2363.0], [22.1, 2384.0], [22.2, 2384.0], [22.3, 2391.0], [22.4, 2408.0], [22.5, 2428.0], [22.6, 2451.0], [22.7, 2456.0], [22.8, 2482.0], [22.9, 2506.0], [23.0, 2543.0], [23.1, 2550.0], [23.2, 2561.0], [23.3, 2565.0], [23.4, 2569.0], [23.5, 2573.0], [23.6, 2591.0], [23.7, 2594.0], [23.8, 2605.0], [23.9, 2615.0], [24.0, 2800.0], [24.1, 2804.0], [24.2, 2809.0], [24.3, 2810.0], [24.4, 2813.0], [24.5, 2814.0], [24.6, 2814.0], [24.7, 2815.0], [24.8, 2818.0], [24.9, 2826.0], [25.0, 2838.0], [25.1, 2840.0], [25.2, 2841.0], [25.3, 2842.0], [25.4, 2850.0], [25.5, 2851.0], [25.6, 2854.0], [25.7, 2856.0], [25.8, 2858.0], [25.9, 2865.0], [26.0, 2873.0], [26.1, 2876.0], [26.2, 2880.0], [26.3, 2884.0], [26.4, 2888.0], [26.5, 2891.0], [26.6, 2891.0], [26.7, 2892.0], [26.8, 2899.0], [26.9, 2900.0], [27.0, 2901.0], [27.1, 2904.0], [27.2, 2906.0], [27.3, 2908.0], [27.4, 2908.0], [27.5, 2909.0], [27.6, 2912.0], [27.7, 2912.0], [27.8, 2918.0], [27.9, 2920.0], [28.0, 2922.0], [28.1, 2929.0], [28.2, 2937.0], [28.3, 2943.0], [28.4, 2950.0], [28.5, 2955.0], [28.6, 2956.0], [28.7, 2957.0], [28.8, 2974.0], [28.9, 3040.0], [29.0, 3049.0], [29.1, 3084.0], [29.2, 3118.0], [29.3, 3122.0], [29.4, 3144.0], [29.5, 3174.0], [29.6, 3181.0], [29.7, 3207.0], [29.8, 3211.0], [29.9, 3211.0], [30.0, 3216.0], [30.1, 3216.0], [30.2, 3220.0], [30.3, 3224.0], [30.4, 3226.0], [30.5, 3228.0], [30.6, 3229.0], [30.7, 3249.0], [30.8, 3249.0], [30.9, 3249.0], [31.0, 3251.0], [31.1, 3252.0], [31.2, 3259.0], [31.3, 3264.0], [31.4, 3265.0], [31.5, 3268.0], [31.6, 3275.0], [31.7, 3276.0], [31.8, 3293.0], [31.9, 3296.0], [32.0, 3297.0], [32.1, 3297.0], [32.2, 3299.0], [32.3, 3301.0], [32.4, 3301.0], [32.5, 3301.0], [32.6, 3306.0], [32.7, 3307.0], [32.8, 3310.0], [32.9, 3313.0], [33.0, 3315.0], [33.1, 3324.0], [33.2, 3325.0], [33.3, 3327.0], [33.4, 3332.0], [33.5, 3334.0], [33.6, 3334.0], [33.7, 3335.0], [33.8, 3336.0], [33.9, 3347.0], [34.0, 3356.0], [34.1, 3357.0], [34.2, 3363.0], [34.3, 3367.0], [34.4, 3369.0], [34.5, 3382.0], [34.6, 3434.0], [34.7, 3468.0], [34.8, 3471.0], [34.9, 3506.0], [35.0, 3538.0], [35.1, 3547.0], [35.2, 3547.0], [35.3, 3549.0], [35.4, 3578.0], [35.5, 3596.0], [35.6, 3599.0], [35.7, 3603.0], [35.8, 3605.0], [35.9, 3622.0], [36.0, 3693.0], [36.1, 3719.0], [36.2, 3721.0], [36.3, 3744.0], [36.4, 3813.0], [36.5, 3845.0], [36.6, 3848.0], [36.7, 3874.0], [36.8, 3882.0], [36.9, 3894.0], [37.0, 3896.0], [37.1, 3897.0], [37.2, 3936.0], [37.3, 3940.0], [37.4, 3964.0], [37.5, 3969.0], [37.6, 3979.0], [37.7, 4001.0], [37.8, 4071.0], [37.9, 4083.0], [38.0, 4091.0], [38.1, 4095.0], [38.2, 4108.0], [38.3, 4176.0], [38.4, 4196.0], [38.5, 4205.0], [38.6, 4207.0], [38.7, 4220.0], [38.8, 4237.0], [38.9, 4239.0], [39.0, 4248.0], [39.1, 4267.0], [39.2, 4271.0], [39.3, 4279.0], [39.4, 4280.0], [39.5, 4282.0], [39.6, 4284.0], [39.7, 4285.0], [39.8, 4289.0], [39.9, 4295.0], [40.0, 4300.0], [40.1, 4301.0], [40.2, 4305.0], [40.3, 4307.0], [40.4, 4311.0], [40.5, 4313.0], [40.6, 4316.0], [40.7, 4324.0], [40.8, 4326.0], [40.9, 4328.0], [41.0, 4331.0], [41.1, 4340.0], [41.2, 4345.0], [41.3, 4345.0], [41.4, 4346.0], [41.5, 4346.0], [41.6, 4348.0], [41.7, 4350.0], [41.8, 4351.0], [41.9, 4364.0], [42.0, 4365.0], [42.1, 4368.0], [42.2, 4372.0], [42.3, 4374.0], [42.4, 4377.0], [42.5, 4377.0], [42.6, 4378.0], [42.7, 4379.0], [42.8, 4380.0], [42.9, 4380.0], [43.0, 4383.0], [43.1, 4384.0], [43.2, 4385.0], [43.3, 4387.0], [43.4, 4388.0], [43.5, 4391.0], [43.6, 4392.0], [43.7, 4392.0], [43.8, 4393.0], [43.9, 4393.0], [44.0, 4393.0], [44.1, 4395.0], [44.2, 4396.0], [44.3, 4400.0], [44.4, 4400.0], [44.5, 4401.0], [44.6, 4401.0], [44.7, 4402.0], [44.8, 4406.0], [44.9, 4408.0], [45.0, 4409.0], [45.1, 4409.0], [45.2, 4409.0], [45.3, 4409.0], [45.4, 4409.0], [45.5, 4409.0], [45.6, 4410.0], [45.7, 4411.0], [45.8, 4412.0], [45.9, 4412.0], [46.0, 4412.0], [46.1, 4414.0], [46.2, 4414.0], [46.3, 4416.0], [46.4, 4418.0], [46.5, 4422.0], [46.6, 4422.0], [46.7, 4423.0], [46.8, 4425.0], [46.9, 4425.0], [47.0, 4425.0], [47.1, 4427.0], [47.2, 4427.0], [47.3, 4432.0], [47.4, 4434.0], [47.5, 4435.0], [47.6, 4436.0], [47.7, 4437.0], [47.8, 4441.0], [47.9, 4447.0], [48.0, 4450.0], [48.1, 4450.0], [48.2, 4451.0], [48.3, 4456.0], [48.4, 4463.0], [48.5, 4464.0], [48.6, 4465.0], [48.7, 4466.0], [48.8, 4470.0], [48.9, 4471.0], [49.0, 4471.0], [49.1, 4473.0], [49.2, 4476.0], [49.3, 4479.0], [49.4, 4483.0], [49.5, 4485.0], [49.6, 4488.0], [49.7, 4489.0], [49.8, 4495.0], [49.9, 4498.0], [50.0, 4499.0], [50.1, 4501.0], [50.2, 4501.0], [50.3, 4503.0], [50.4, 4503.0], [50.5, 4504.0], [50.6, 4505.0], [50.7, 4506.0], [50.8, 4508.0], [50.9, 4510.0], [51.0, 4516.0], [51.1, 4518.0], [51.2, 4518.0], [51.3, 4519.0], [51.4, 4519.0], [51.5, 4519.0], [51.6, 4519.0], [51.7, 4520.0], [51.8, 4522.0], [51.9, 4523.0], [52.0, 4524.0], [52.1, 4531.0], [52.2, 4539.0], [52.3, 4540.0], [52.4, 4543.0], [52.5, 4543.0], [52.6, 4544.0], [52.7, 4546.0], [52.8, 4548.0], [52.9, 4548.0], [53.0, 4548.0], [53.1, 4557.0], [53.2, 4560.0], [53.3, 4560.0], [53.4, 4562.0], [53.5, 4563.0], [53.6, 4565.0], [53.7, 4569.0], [53.8, 4571.0], [53.9, 4572.0], [54.0, 4573.0], [54.1, 4576.0], [54.2, 4579.0], [54.3, 4579.0], [54.4, 4580.0], [54.5, 4581.0], [54.6, 4584.0], [54.7, 4587.0], [54.8, 4589.0], [54.9, 4591.0], [55.0, 4592.0], [55.1, 4592.0], [55.2, 4593.0], [55.3, 4595.0], [55.4, 4596.0], [55.5, 4597.0], [55.6, 4605.0], [55.7, 4608.0], [55.8, 4608.0], [55.9, 4609.0], [56.0, 4610.0], [56.1, 4611.0], [56.2, 4613.0], [56.3, 4614.0], [56.4, 4614.0], [56.5, 4616.0], [56.6, 4618.0], [56.7, 4622.0], [56.8, 4623.0], [56.9, 4624.0], [57.0, 4625.0], [57.1, 4626.0], [57.2, 4627.0], [57.3, 4628.0], [57.4, 4629.0], [57.5, 4636.0], [57.6, 4636.0], [57.7, 4637.0], [57.8, 4638.0], [57.9, 4640.0], [58.0, 4640.0], [58.1, 4641.0], [58.2, 4641.0], [58.3, 4641.0], [58.4, 4644.0], [58.5, 4652.0], [58.6, 4655.0], [58.7, 4657.0], [58.8, 4658.0], [58.9, 4672.0], [59.0, 4672.0], [59.1, 4672.0], [59.2, 4672.0], [59.3, 4672.0], [59.4, 4673.0], [59.5, 4674.0], [59.6, 4675.0], [59.7, 4676.0], [59.8, 4678.0], [59.9, 4682.0], [60.0, 4682.0], [60.1, 4684.0], [60.2, 4687.0], [60.3, 4687.0], [60.4, 4688.0], [60.5, 4693.0], [60.6, 4695.0], [60.7, 4696.0], [60.8, 4700.0], [60.9, 4700.0], [61.0, 4701.0], [61.1, 4701.0], [61.2, 4703.0], [61.3, 4706.0], [61.4, 4706.0], [61.5, 4709.0], [61.6, 4709.0], [61.7, 4710.0], [61.8, 4713.0], [61.9, 4715.0], [62.0, 4716.0], [62.1, 4717.0], [62.2, 4718.0], [62.3, 4719.0], [62.4, 4721.0], [62.5, 4722.0], [62.6, 4723.0], [62.7, 4730.0], [62.8, 4731.0], [62.9, 4732.0], [63.0, 4735.0], [63.1, 4735.0], [63.2, 4738.0], [63.3, 4741.0], [63.4, 4744.0], [63.5, 4747.0], [63.6, 4748.0], [63.7, 4749.0], [63.8, 4749.0], [63.9, 4753.0], [64.0, 4754.0], [64.1, 4755.0], [64.2, 4758.0], [64.3, 4760.0], [64.4, 4761.0], [64.5, 4763.0], [64.6, 4764.0], [64.7, 4765.0], [64.8, 4765.0], [64.9, 4765.0], [65.0, 4766.0], [65.1, 4767.0], [65.2, 4767.0], [65.3, 4767.0], [65.4, 4768.0], [65.5, 4768.0], [65.6, 4775.0], [65.7, 4775.0], [65.8, 4776.0], [65.9, 4776.0], [66.0, 4777.0], [66.1, 4778.0], [66.2, 4779.0], [66.3, 4780.0], [66.4, 4781.0], [66.5, 4782.0], [66.6, 4786.0], [66.7, 4786.0], [66.8, 4787.0], [66.9, 4791.0], [67.0, 4792.0], [67.1, 4793.0], [67.2, 4793.0], [67.3, 4796.0], [67.4, 4796.0], [67.5, 4800.0], [67.6, 4804.0], [67.7, 4808.0], [67.8, 4809.0], [67.9, 4813.0], [68.0, 4816.0], [68.1, 4818.0], [68.2, 4822.0], [68.3, 4822.0], [68.4, 4824.0], [68.5, 4827.0], [68.6, 4829.0], [68.7, 4833.0], [68.8, 4834.0], [68.9, 4834.0], [69.0, 4836.0], [69.1, 4838.0], [69.2, 4839.0], [69.3, 4841.0], [69.4, 4842.0], [69.5, 4842.0], [69.6, 4843.0], [69.7, 4843.0], [69.8, 4844.0], [69.9, 4849.0], [70.0, 4849.0], [70.1, 4851.0], [70.2, 4851.0], [70.3, 4852.0], [70.4, 4854.0], [70.5, 4854.0], [70.6, 4855.0], [70.7, 4857.0], [70.8, 4859.0], [70.9, 4860.0], [71.0, 4864.0], [71.1, 4867.0], [71.2, 4869.0], [71.3, 4871.0], [71.4, 4871.0], [71.5, 4872.0], [71.6, 4873.0], [71.7, 4877.0], [71.8, 4879.0], [71.9, 4882.0], [72.0, 4883.0], [72.1, 4885.0], [72.2, 4885.0], [72.3, 4885.0], [72.4, 4886.0], [72.5, 4888.0], [72.6, 4889.0], [72.7, 4891.0], [72.8, 4901.0], [72.9, 4901.0], [73.0, 4903.0], [73.1, 4908.0], [73.2, 4909.0], [73.3, 4914.0], [73.4, 4916.0], [73.5, 4916.0], [73.6, 4917.0], [73.7, 4918.0], [73.8, 4920.0], [73.9, 4920.0], [74.0, 4921.0], [74.1, 4950.0], [74.2, 4955.0], [74.3, 4961.0], [74.4, 4963.0], [74.5, 4980.0], [74.6, 4992.0], [74.7, 4999.0], [74.8, 5004.0], [74.9, 5025.0], [75.0, 5026.0], [75.1, 5027.0], [75.2, 5031.0], [75.3, 5032.0], [75.4, 5040.0], [75.5, 5047.0], [75.6, 5052.0], [75.7, 5062.0], [75.8, 5063.0], [75.9, 5071.0], [76.0, 5072.0], [76.1, 5083.0], [76.2, 5096.0], [76.3, 5101.0], [76.4, 5102.0], [76.5, 5105.0], [76.6, 5120.0], [76.7, 5120.0], [76.8, 5129.0], [76.9, 5152.0], [77.0, 5157.0], [77.1, 5165.0], [77.2, 5176.0], [77.3, 5179.0], [77.4, 5179.0], [77.5, 5186.0], [77.6, 5188.0], [77.7, 5196.0], [77.8, 5264.0], [77.9, 5284.0], [78.0, 5430.0], [78.1, 5531.0], [78.2, 5547.0], [78.3, 5592.0], [78.4, 5605.0], [78.5, 5625.0], [78.6, 5629.0], [78.7, 5632.0], [78.8, 5646.0], [78.9, 5651.0], [79.0, 5656.0], [79.1, 5670.0], [79.2, 5682.0], [79.3, 5704.0], [79.4, 5823.0], [79.5, 6051.0], [79.6, 6102.0], [79.7, 6139.0], [79.8, 6145.0], [79.9, 6147.0], [80.0, 6178.0], [80.1, 6180.0], [80.2, 6253.0], [80.3, 6260.0], [80.4, 6329.0], [80.5, 6347.0], [80.6, 6367.0], [80.7, 6395.0], [80.8, 6399.0], [80.9, 6410.0], [81.0, 6419.0], [81.1, 6422.0], [81.2, 6424.0], [81.3, 6425.0], [81.4, 6468.0], [81.5, 6501.0], [81.6, 6523.0], [81.7, 6526.0], [81.8, 6527.0], [81.9, 6537.0], [82.0, 6537.0], [82.1, 6576.0], [82.2, 6610.0], [82.3, 6637.0], [82.4, 6638.0], [82.5, 6661.0], [82.6, 6667.0], [82.7, 6691.0], [82.8, 6811.0], [82.9, 6841.0], [83.0, 6844.0], [83.1, 6855.0], [83.2, 6860.0], [83.3, 6921.0], [83.4, 6935.0], [83.5, 6953.0], [83.6, 6960.0], [83.7, 6999.0], [83.8, 7047.0], [83.9, 7048.0], [84.0, 7056.0], [84.1, 7061.0], [84.2, 7063.0], [84.3, 7117.0], [84.4, 7118.0], [84.5, 7125.0], [84.6, 7147.0], [84.7, 7210.0], [84.8, 7234.0], [84.9, 7250.0], [85.0, 7260.0], [85.1, 7265.0], [85.2, 7289.0], [85.3, 7338.0], [85.4, 7339.0], [85.5, 7348.0], [85.6, 7358.0], [85.7, 7396.0], [85.8, 7410.0], [85.9, 7422.0], [86.0, 7445.0], [86.1, 7447.0], [86.2, 7451.0], [86.3, 7456.0], [86.4, 7463.0], [86.5, 7495.0], [86.6, 7497.0], [86.7, 7505.0], [86.8, 7523.0], [86.9, 7527.0], [87.0, 7532.0], [87.1, 7546.0], [87.2, 7547.0], [87.3, 7562.0], [87.4, 7563.0], [87.5, 7570.0], [87.6, 7607.0], [87.7, 7618.0], [87.8, 7643.0], [87.9, 7645.0], [88.0, 7686.0], [88.1, 7697.0], [88.2, 7711.0], [88.3, 7741.0], [88.4, 7757.0], [88.5, 7782.0], [88.6, 7891.0], [88.7, 8032.0], [88.8, 8157.0], [88.9, 8163.0], [89.0, 8182.0], [89.1, 8182.0], [89.2, 8206.0], [89.3, 8207.0], [89.4, 8210.0], [89.5, 8225.0], [89.6, 8231.0], [89.7, 8233.0], [89.8, 8251.0], [89.9, 8252.0], [90.0, 8264.0], [90.1, 8280.0], [90.2, 8297.0], [90.3, 8304.0], [90.4, 8315.0], [90.5, 8321.0], [90.6, 8322.0], [90.7, 8338.0], [90.8, 8361.0], [90.9, 8458.0], [91.0, 8485.0], [91.1, 8491.0], [91.2, 8493.0], [91.3, 8494.0], [91.4, 8498.0], [91.5, 8503.0], [91.6, 8503.0], [91.7, 8508.0], [91.8, 8508.0], [91.9, 8539.0], [92.0, 8578.0], [92.1, 8587.0], [92.2, 8614.0], [92.3, 8621.0], [92.4, 8653.0], [92.5, 8661.0], [92.6, 8704.0], [92.7, 8725.0], [92.8, 8728.0], [92.9, 8915.0], [93.0, 8961.0], [93.1, 8970.0], [93.2, 8971.0], [93.3, 8981.0], [93.4, 9040.0], [93.5, 9081.0], [93.6, 9086.0], [93.7, 9091.0], [93.8, 9128.0], [93.9, 9138.0], [94.0, 9144.0], [94.1, 9148.0], [94.2, 9153.0], [94.3, 9170.0], [94.4, 9184.0], [94.5, 9195.0], [94.6, 9201.0], [94.7, 9220.0], [94.8, 9223.0], [94.9, 9230.0], [95.0, 9235.0], [95.1, 9241.0], [95.2, 9263.0], [95.3, 9273.0], [95.4, 9279.0], [95.5, 9280.0], [95.6, 9282.0], [95.7, 9287.0], [95.8, 9304.0], [95.9, 9306.0], [96.0, 9315.0], [96.1, 9320.0], [96.2, 9330.0], [96.3, 9336.0], [96.4, 9368.0], [96.5, 9378.0], [96.6, 9378.0], [96.7, 9448.0], [96.8, 9450.0], [96.9, 9451.0], [97.0, 9476.0], [97.1, 9495.0], [97.2, 9533.0], [97.3, 9538.0], [97.4, 9546.0], [97.5, 9586.0], [97.6, 9594.0], [97.7, 9668.0], [97.8, 9728.0], [97.9, 9791.0], [98.0, 9815.0], [98.1, 9827.0], [98.2, 10512.0], [98.3, 10517.0], [98.4, 11813.0], [98.5, 11991.0], [98.6, 12044.0], [98.7, 12088.0], [98.8, 12111.0], [98.9, 12139.0], [99.0, 12147.0], [99.1, 12176.0], [99.2, 12196.0], [99.3, 12351.0], [99.4, 12358.0], [99.5, 12386.0], [99.6, 21004.0], [99.7, 21004.0], [99.8, 21004.0], [99.9, 21004.0], [100.0, 21177.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 500.0, "maxY": 81.0, "series": [{"data": [[600.0, 18.0], [700.0, 26.0], [800.0, 8.0], [1600.0, 2.0], [1700.0, 8.0], [1800.0, 19.0], [1900.0, 39.0], [2000.0, 40.0], [2100.0, 37.0], [2200.0, 48.0], [2300.0, 22.0], [2400.0, 6.0], [2500.0, 11.0], [2600.0, 3.0], [2800.0, 35.0], [2900.0, 24.0], [3000.0, 4.0], [3100.0, 5.0], [3200.0, 32.0], [3300.0, 28.0], [3400.0, 3.0], [3500.0, 10.0], [3600.0, 5.0], [3700.0, 4.0], [3800.0, 9.0], [3900.0, 6.0], [4000.0, 6.0], [4100.0, 4.0], [4200.0, 18.0], [4300.0, 52.0], [4400.0, 70.0], [4500.0, 66.0], [4600.0, 64.0], [4700.0, 81.0], [4800.0, 64.0], [4900.0, 24.0], [5100.0, 18.0], [5000.0, 18.0], [5200.0, 2.0], [5300.0, 1.0], [5400.0, 1.0], [5600.0, 11.0], [5500.0, 3.0], [5700.0, 1.0], [5800.0, 1.0], [6000.0, 2.0], [6100.0, 7.0], [6200.0, 3.0], [6300.0, 5.0], [6400.0, 8.0], [6500.0, 8.0], [6600.0, 7.0], [6700.0, 1.0], [6900.0, 5.0], [6800.0, 6.0], [7000.0, 7.0], [7100.0, 5.0], [7200.0, 7.0], [7400.0, 10.0], [7300.0, 6.0], [7500.0, 11.0], [7600.0, 8.0], [7700.0, 4.0], [7800.0, 2.0], [8000.0, 1.0], [8100.0, 5.0], [8200.0, 13.0], [8500.0, 8.0], [8400.0, 8.0], [8300.0, 7.0], [8600.0, 5.0], [8700.0, 4.0], [8900.0, 5.0], [9000.0, 5.0], [9100.0, 10.0], [9200.0, 15.0], [9300.0, 10.0], [9400.0, 6.0], [9500.0, 6.0], [9600.0, 2.0], [9700.0, 2.0], [9800.0, 3.0], [10500.0, 2.0], [11900.0, 1.0], [12000.0, 3.0], [12100.0, 6.0], [11800.0, 1.0], [12300.0, 3.0], [21000.0, 5.0], [21100.0, 1.0], [500.0, 3.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 21100.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 5.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 1,000ms"], [1, "Requests having \nresponse time > 1,000ms and <= 3,000ms"], [2, "Requests having \nresponse time > 3,000ms"], [3, "Requests in error"]], "maxY": 855.0, "series": [{"data": [[0.0, 55.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 1,000ms", "isController": false}, {"data": [[1.0, 294.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 1,000ms and <= 3,000ms", "isController": false}, {"data": [[2.0, 855.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 3,000ms", "isController": false}, {"data": [[3.0, 5.0]], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 3.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 1.0, "minX": 1.58668439E12, "maxY": 400.0, "series": [{"data": [[1.58668441E12, 7.5], [1.586684406E12, 17.6], [1.586684407E12, 11.5], [1.586684408E12, 9.5], [1.586684414E12, 2.0], [1.586684393E12, 400.0], [1.586684394E12, 400.0], [1.586684415E12, 1.0], [1.58668439E12, 399.3636363636364], [1.586684392E12, 400.0], [1.586684413E12, 5.25], [1.586684398E12, 400.0], [1.586684399E12, 400.0], [1.5866844E12, 397.1764705882354], [1.586684395E12, 400.0], [1.586684396E12, 400.0], [1.586684397E12, 400.0], [1.586684403E12, 220.73239436619724], [1.586684404E12, 138.76086956521743], [1.586684405E12, 57.75714285714284], [1.586684401E12, 358.280701754386], [1.586684402E12, 292.72972972972974]], "isOverall": false, "label": "jp@gc - Ultimate Thread Group", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 1.586684415E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 2506.5, "minX": 1.0, "maxY": 21177.0, "series": [{"data": [[2.0, 21177.0], [3.0, 21004.0], [6.0, 21003.0], [7.0, 12351.0], [8.0, 11813.0], [9.0, 9114.0], [10.0, 12159.0], [11.0, 9128.0], [12.0, 9279.0], [13.0, 9241.0], [15.0, 9250.0], [16.0, 12196.0], [17.0, 12147.0], [18.0, 9230.0], [19.0, 6860.0], [20.0, 9223.0], [21.0, 6399.0], [22.0, 9170.0], [24.0, 6976.0], [25.0, 6844.0], [26.0, 5625.0], [27.0, 4836.0], [29.0, 8625.0], [30.0, 4809.0], [31.0, 4844.0], [33.0, 4777.0], [32.0, 4793.0], [35.0, 4777.0], [34.0, 6889.0], [39.0, 4695.0], [38.0, 5556.0], [41.0, 4766.0], [40.0, 5047.0], [43.0, 4682.0], [45.0, 4731.0], [44.0, 12139.0], [47.0, 4701.0], [46.0, 7125.0], [48.0, 4610.0], [51.0, 7250.0], [50.0, 4826.0], [53.0, 7497.0], [52.0, 4701.0], [55.0, 4506.5], [56.0, 4672.0], [59.0, 4827.0], [58.0, 4931.5], [61.0, 4672.0], [62.0, 4470.0], [67.0, 5179.0], [66.0, 4658.0], [65.0, 4790.666666666667], [71.0, 5025.0], [70.0, 5032.0], [69.0, 4766.0], [68.0, 4608.0], [75.0, 4872.0], [74.0, 4765.0], [73.0, 4519.0], [72.0, 4961.0], [79.0, 4885.0], [78.0, 4842.0], [77.0, 4423.0], [76.0, 4841.0], [82.0, 4914.0], [81.0, 12044.0], [80.0, 4852.0], [87.0, 4886.0], [86.0, 4901.0], [85.0, 4995.666666666667], [91.0, 8635.5], [89.0, 4893.5], [95.0, 10512.0], [94.0, 4920.0], [93.0, 4869.0], [92.0, 5646.0], [99.0, 4841.5], [97.0, 4520.0], [96.0, 4560.0], [102.0, 5653.0], [101.0, 4873.0], [100.0, 4601.0], [106.0, 4871.0], [105.0, 4605.0], [104.0, 5174.5], [110.0, 12111.0], [109.0, 4870.0], [108.0, 8499.0], [115.0, 8470.5], [113.0, 4815.0], [112.0, 4938.5], [119.0, 4843.0], [118.0, 10147.0], [116.0, 4591.0], [121.0, 4596.0], [120.0, 5176.0], [127.0, 5803.5], [126.0, 4796.0], [124.0, 7250.333333333333], [135.0, 4830.0], [133.0, 4560.0], [132.0, 4562.0], [131.0, 4843.0], [130.0, 6841.0], [129.0, 4579.0], [128.0, 4644.0], [143.0, 5606.0], [142.0, 5354.0], [141.0, 4768.0], [140.0, 4548.0], [139.0, 4889.0], [138.0, 4891.0], [137.0, 4816.0], [136.0, 4565.0], [151.0, 4747.0], [150.0, 5098.0], [147.0, 4775.0], [146.0, 4546.0], [145.0, 4629.0], [144.0, 5656.0], [158.0, 4740.0], [156.0, 7563.0], [155.0, 4518.0], [154.0, 5186.0], [153.0, 4775.0], [167.0, 4855.0], [166.0, 4776.0], [165.0, 4786.0], [164.0, 4719.0], [163.0, 7546.0], [162.0, 4722.0], [161.0, 6855.0], [160.0, 4921.5], [175.0, 5190.0], [173.0, 5157.0], [172.0, 4793.0], [170.0, 4522.0], [169.0, 4779.0], [168.0, 4778.0], [183.0, 4766.333333333333], [180.0, 4824.0], [179.0, 4749.0], [178.0, 4768.5], [176.0, 5072.0], [191.0, 4767.5], [189.0, 4808.0], [188.0, 4780.0], [187.0, 4749.0], [186.0, 4627.0], [185.0, 4502.0], [184.0, 4557.0], [199.0, 4473.0], [198.0, 4882.0], [197.0, 5071.0], [196.0, 4943.5], [194.0, 5062.0], [193.0, 5026.0], [192.0, 4883.0], [207.0, 4767.0], [206.0, 4765.0], [205.0, 4450.0], [204.0, 4860.0], [203.0, 4735.0], [202.0, 5147.5], [200.0, 4909.0], [215.0, 5365.5], [213.0, 4718.0], [212.0, 5196.0], [211.0, 4483.0], [210.0, 4891.333333333333], [223.0, 5670.0], [222.0, 5531.0], [221.0, 5264.0], [220.0, 5179.5], [218.0, 6921.0], [217.0, 4723.5], [230.0, 4674.0], [229.0, 4764.0], [228.0, 4854.0], [227.0, 4688.0], [226.0, 4471.0], [225.0, 4992.0], [224.0, 5632.0], [237.0, 4451.0], [236.0, 4765.0], [235.0, 4581.0], [234.0, 4918.0], [233.0, 4589.5], [232.0, 5823.0], [242.0, 4712.0], [241.0, 4640.0], [240.0, 4816.0], [255.0, 4689.0], [253.0, 4684.0], [251.0, 4897.111111111111], [269.0, 4589.0], [270.0, 4463.0], [268.0, 5150.5], [259.0, 4548.0], [258.0, 6963.0], [256.0, 4579.0], [266.0, 4716.0], [265.0, 5651.0], [264.0, 5592.0], [263.0, 4718.0], [262.0, 4737.0], [261.0, 4507.0], [260.0, 4510.0], [286.0, 4866.5], [287.0, 5083.0], [284.0, 4747.0], [275.0, 4609.0], [274.0, 4673.0], [273.0, 4588.333333333333], [282.0, 4408.0], [281.0, 4346.0], [280.0, 4341.0], [279.0, 4662.0], [278.0, 4377.0], [277.0, 4301.0], [276.0, 4305.0], [302.0, 4422.0], [303.0, 4409.0], [301.0, 4864.0], [300.0, 5027.0], [299.0, 5038.5], [297.0, 4340.0], [296.0, 4349.0], [295.0, 4675.0], [290.0, 5364.5], [288.0, 4324.0], [294.0, 5031.0], [293.0, 4427.0], [292.0, 4821.0], [317.0, 4391.0], [319.0, 4642.0], [316.0, 4678.0], [307.0, 4760.0], [306.0, 4412.0], [305.0, 4980.0], [304.0, 4425.0], [315.0, 4488.0], [314.0, 4735.0], [313.0, 4410.0], [312.0, 4859.5], [310.0, 4792.0], [309.0, 5000.0], [334.0, 4564.0], [335.0, 4706.0], [333.0, 4715.0], [332.0, 4427.0], [331.0, 5430.0], [330.0, 4446.0], [329.0, 4913.333333333333], [326.0, 4723.0], [320.0, 4414.0], [322.0, 4441.0], [321.0, 4393.0], [325.0, 4839.0], [324.0, 4936.0], [350.0, 4755.0], [351.0, 4485.0], [349.0, 4851.0], [348.0, 4450.0], [347.0, 4781.0], [346.0, 4822.0], [345.0, 4775.0], [344.0, 4688.5], [342.0, 4539.0], [337.0, 4409.0], [336.0, 4672.0], [339.0, 4425.0], [338.0, 4916.0], [341.0, 4396.0], [340.0, 4732.0], [364.0, 4547.5], [366.0, 4535.0], [367.0, 4540.0], [365.0, 4804.0], [362.0, 4700.0], [361.0, 4499.0], [359.0, 4758.0], [354.0, 4754.0], [353.0, 4822.0], [358.0, 4621.5], [356.0, 4794.0], [383.0, 4537.25], [375.0, 2506.5], [371.0, 5052.0], [369.0, 4712.5], [379.0, 4557.0], [378.0, 4418.0], [377.0, 4465.0], [376.0, 4493.0], [374.0, 4857.0], [373.0, 4764.0], [372.0, 4762.5], [396.0, 5038.318181818182], [390.0, 4314.6], [399.0, 4584.0], [398.0, 4422.333333333333], [397.0, 4618.5], [395.0, 4659.833333333333], [393.0, 4552.333333333333], [391.0, 4495.0], [385.0, 4590.0], [389.0, 4447.0], [388.0, 4456.0], [387.0, 4584.0], [386.0, 4615.0], [400.0, 4124.492884864163], [1.0, 21004.0]], "isOverall": false, "label": "HTTP Request", "isController": false}, {"data": [[333.95119933829596, 4599.185277088509]], "isOverall": false, "label": "HTTP Request-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 400.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 0.0, "minX": 1.58668439E12, "maxY": 50986.0, "series": [{"data": [[1.58668441E12, 962.0], [1.586684406E12, 4810.0], [1.586684407E12, 962.0], [1.586684408E12, 962.0], [1.586684414E12, 481.0], [1.586684393E12, 41366.0], [1.586684394E12, 50986.0], [1.586684415E12, 2719.0], [1.58668439E12, 26455.0], [1.586684392E12, 37999.0], [1.586684413E12, 10876.0], [1.586684398E12, 40885.0], [1.586684399E12, 38961.0], [1.5866844E12, 40885.0], [1.586684395E12, 37518.0], [1.586684396E12, 43290.0], [1.586684397E12, 37518.0], [1.586684403E12, 34151.0], [1.586684404E12, 44252.0], [1.586684405E12, 33670.0], [1.586684401E12, 27417.0], [1.586684402E12, 35594.0]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.58668441E12, 460.0], [1.586684406E12, 2300.0], [1.586684407E12, 460.0], [1.586684408E12, 460.0], [1.586684414E12, 230.0], [1.586684393E12, 19780.0], [1.586684394E12, 24380.0], [1.586684415E12, 0.0], [1.58668439E12, 12650.0], [1.586684392E12, 18170.0], [1.586684413E12, 0.0], [1.586684398E12, 19550.0], [1.586684399E12, 18630.0], [1.5866844E12, 19550.0], [1.586684395E12, 17940.0], [1.586684396E12, 20700.0], [1.586684397E12, 17940.0], [1.586684403E12, 16330.0], [1.586684404E12, 21160.0], [1.586684405E12, 16100.0], [1.586684401E12, 13110.0], [1.586684402E12, 17020.0]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 1.586684415E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 720.2727272727274, "minX": 1.58668439E12, "maxY": 21177.0, "series": [{"data": [[1.58668441E12, 12082.0], [1.586684406E12, 9296.6], [1.586684407E12, 9203.5], [1.586684408E12, 10636.5], [1.586684414E12, 21177.0], [1.586684393E12, 3509.988372093023], [1.586684394E12, 3853.4150943396235], [1.586684415E12, 21004.0], [1.58668439E12, 720.2727272727274], [1.586684392E12, 2938.493670886075], [1.586684413E12, 21003.25], [1.586684398E12, 7700.082352941176], [1.586684399E12, 8006.765432098766], [1.5866844E12, 5219.094117647058], [1.586684395E12, 2294.7564102564115], [1.586684396E12, 2130.3444444444435], [1.586684397E12, 4130.628205128205], [1.586684403E12, 4908.056338028166], [1.586684404E12, 5464.0652173913], [1.586684405E12, 5508.099999999999], [1.586684401E12, 4653.789473684212], [1.586684402E12, 4780.35135135135]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 1000, "maxX": 1.586684415E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 0.0, "minX": 1.58668439E12, "maxY": 21177.0, "series": [{"data": [[1.58668441E12, 12082.0], [1.586684406E12, 9296.0], [1.586684407E12, 9203.5], [1.586684408E12, 10636.5], [1.586684414E12, 21177.0], [1.586684393E12, 3503.5697674418607], [1.586684394E12, 3800.4905660377362], [1.586684415E12, 0.0], [1.58668439E12, 713.8363636363634], [1.586684392E12, 2937.746835443039], [1.586684413E12, 0.0], [1.586684398E12, 7691.105882352943], [1.586684399E12, 8006.111111111111], [1.5866844E12, 5215.705882352942], [1.586684395E12, 2294.5128205128203], [1.586684396E12, 2129.866666666666], [1.586684397E12, 4130.038461538461], [1.586684403E12, 4902.535211267606], [1.586684404E12, 5463.913043478262], [1.586684405E12, 5502.471428571427], [1.586684401E12, 4646.929824561402], [1.586684402E12, 4778.189189189189]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 1000, "maxX": 1.586684415E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 36.89473684210527, "minX": 1.58668439E12, "maxY": 21004.0, "series": [{"data": [[1.58668441E12, 3117.0], [1.586684406E12, 639.5], [1.586684407E12, 4560.0], [1.586684408E12, 6054.5], [1.586684414E12, 3059.0], [1.586684393E12, 112.39534883720935], [1.586684394E12, 99.59433962264148], [1.586684415E12, 21004.0], [1.58668439E12, 107.72727272727273], [1.586684392E12, 102.82278481012658], [1.586684413E12, 21003.25], [1.586684398E12, 274.83529411764704], [1.586684399E12, 90.4074074074074], [1.5866844E12, 220.85882352941186], [1.586684395E12, 60.628205128205124], [1.586684396E12, 58.944444444444464], [1.586684397E12, 47.52564102564102], [1.586684403E12, 46.28169014084507], [1.586684404E12, 277.8478260869565], [1.586684405E12, 308.77142857142854], [1.586684401E12, 36.89473684210527], [1.586684402E12, 45.013513513513495]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 1000, "maxX": 1.586684415E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 553.0, "minX": 1.58668439E12, "maxY": 21177.0, "series": [{"data": [[1.58668441E12, 12351.0], [1.586684406E12, 12196.0], [1.586684407E12, 9279.0], [1.586684408E12, 12159.0], [1.586684414E12, 21177.0], [1.586684393E12, 4224.0], [1.586684394E12, 4920.0], [1.58668439E12, 840.0], [1.586684392E12, 3253.0], [1.586684398E12, 8752.0], [1.586684399E12, 9668.0], [1.5866844E12, 10517.0], [1.586684395E12, 5704.0], [1.586684396E12, 3693.0], [1.586684397E12, 7891.0], [1.586684403E12, 6921.0], [1.586684404E12, 12176.0], [1.586684405E12, 12386.0], [1.586684401E12, 5430.0], [1.586684402E12, 9378.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.58668441E12, 11813.0], [1.586684406E12, 6399.0], [1.586684407E12, 9128.0], [1.586684408E12, 9114.0], [1.586684414E12, 21177.0], [1.586684393E12, 3211.0], [1.586684394E12, 1756.0], [1.58668439E12, 553.0], [1.586684392E12, 2550.0], [1.586684398E12, 2955.0], [1.586684399E12, 4205.0], [1.5866844E12, 4316.0], [1.586684395E12, 1664.0], [1.586684396E12, 1761.0], [1.586684397E12, 1931.0], [1.586684403E12, 4450.0], [1.586684404E12, 4518.0], [1.586684405E12, 4423.0], [1.586684401E12, 4396.0], [1.586684402E12, 4301.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.58668441E12, 8228.6], [1.586684406E12, 8186.800000000001], [1.586684407E12, 8207.0], [1.586684408E12, 8219.599999999999], [1.586684414E12, 8232.0], [1.586684393E12, 3709.3000000000006], [1.586684394E12, 4401.3], [1.58668439E12, 812.2], [1.586684392E12, 3159.0], [1.586684398E12, 7532.2], [1.586684399E12, 8459.300000000001], [1.5866844E12, 8331.6], [1.586684395E12, 4395.0], [1.586684396E12, 4378.5], [1.586684397E12, 4410.4], [1.586684403E12, 8178.4], [1.586684404E12, 8158.200000000001], [1.586684405E12, 7863.800000000001], [1.586684401E12, 8295.3], [1.586684402E12, 8228.0]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.58668441E12, 12034.2], [1.586684406E12, 10546.479999999974], [1.586684407E12, 10517.0], [1.586684408E12, 11961.520000000026], [1.586684414E12, 12043.6], [1.586684393E12, 4191.8], [1.586684394E12, 4732.120000000001], [1.58668439E12, 840.0], [1.586684392E12, 3252.65], [1.586684398E12, 8650.68], [1.586684399E12, 9531.05], [1.5866844E12, 9641.88], [1.586684395E12, 4747.8], [1.586684396E12, 4744.2], [1.586684397E12, 7496.889999999999], [1.586684403E12, 9575.6], [1.586684404E12, 9779.659999999996], [1.586684405E12, 9909.199999999924], [1.586684401E12, 9605.969999999996], [1.586684402E12, 9589.6]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.58668441E12, 9199.8], [1.586684406E12, 9169.1], [1.586684407E12, 9170.0], [1.586684408E12, 9182.599999999999], [1.586684414E12, 9215.25], [1.586684393E12, 3895.9], [1.586684394E12, 4432.65], [1.58668439E12, 835.6], [1.586684392E12, 3221.5], [1.586684398E12, 8297.7], [1.586684399E12, 9148.25], [1.5866844E12, 9165.8], [1.586684395E12, 4430.25], [1.586684396E12, 4417.0], [1.586684397E12, 7050.150000000001], [1.586684403E12, 9009.699999999997], [1.586684404E12, 9044.099999999997], [1.586684405E12, 9064.599999999997], [1.586684401E12, 9143.699999999999], [1.586684402E12, 9087.25]], "isOverall": false, "label": "95th percentile", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 1.586684414E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 3301.0, "minX": 1000.0, "maxY": 21004.0, "series": [{"data": [[9000.0, 4787.0], [5000.0, 3301.0], [3000.0, 4408.0], [6000.0, 4604.5], [1000.0, 4519.0], [2000.0, 4518.5], [4000.0, 3981.5]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[2000.0, 21004.0], [1000.0, 21004.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1, "maxX": 9000.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.create();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 0.0, "minX": 1000.0, "maxY": 4787.0, "series": [{"data": [[9000.0, 4787.0], [5000.0, 3301.0], [3000.0, 4399.0], [6000.0, 4555.5], [1000.0, 4517.0], [2000.0, 4518.5], [4000.0, 3981.5]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[2000.0, 0.0], [1000.0, 0.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1, "maxX": 9000.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 71.0, "minX": 1.586684389E12, "maxY": 269.0, "series": [{"data": [[1.586684398E12, 85.0], [1.586684399E12, 81.0], [1.586684389E12, 269.0], [1.5866844E12, 71.0], [1.586684395E12, 78.0], [1.586684396E12, 90.0], [1.586684397E12, 78.0], [1.586684393E12, 86.0], [1.586684394E12, 106.0], [1.58668439E12, 186.0], [1.586684392E12, 79.0]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 1.5866844E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 1.0, "minX": 1.58668439E12, "maxY": 106.0, "series": [{"data": [[1.58668441E12, 2.0], [1.586684406E12, 10.0], [1.586684407E12, 2.0], [1.586684408E12, 2.0], [1.586684414E12, 1.0], [1.586684393E12, 86.0], [1.586684394E12, 106.0], [1.58668439E12, 55.0], [1.586684392E12, 79.0], [1.586684398E12, 85.0], [1.586684399E12, 81.0], [1.5866844E12, 85.0], [1.586684395E12, 78.0], [1.586684396E12, 90.0], [1.586684397E12, 78.0], [1.586684403E12, 71.0], [1.586684404E12, 92.0], [1.586684405E12, 70.0], [1.586684401E12, 57.0], [1.586684402E12, 74.0]], "isOverall": false, "label": "200", "isController": false}, {"data": [[1.586684415E12, 1.0], [1.586684413E12, 4.0]], "isOverall": false, "label": "Non HTTP response code: org.apache.http.conn.HttpHostConnectException", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 1.586684415E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 1.0, "minX": 1.58668439E12, "maxY": 106.0, "series": [{"data": [[1.58668441E12, 2.0], [1.586684406E12, 10.0], [1.586684407E12, 2.0], [1.586684408E12, 2.0], [1.586684414E12, 1.0], [1.586684393E12, 86.0], [1.586684394E12, 106.0], [1.58668439E12, 55.0], [1.586684392E12, 79.0], [1.586684398E12, 85.0], [1.586684399E12, 81.0], [1.5866844E12, 85.0], [1.586684395E12, 78.0], [1.586684396E12, 90.0], [1.586684397E12, 78.0], [1.586684403E12, 71.0], [1.586684404E12, 92.0], [1.586684405E12, 70.0], [1.586684401E12, 57.0], [1.586684402E12, 74.0]], "isOverall": false, "label": "HTTP Request-success", "isController": false}, {"data": [[1.586684415E12, 1.0], [1.586684413E12, 4.0]], "isOverall": false, "label": "HTTP Request-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 1000, "maxX": 1.586684415E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 1.0, "minX": 1.58668439E12, "maxY": 106.0, "series": [{"data": [[1.58668441E12, 2.0], [1.586684406E12, 10.0], [1.586684407E12, 2.0], [1.586684408E12, 2.0], [1.586684414E12, 1.0], [1.586684393E12, 86.0], [1.586684394E12, 106.0], [1.58668439E12, 55.0], [1.586684392E12, 79.0], [1.586684398E12, 85.0], [1.586684399E12, 81.0], [1.5866844E12, 85.0], [1.586684395E12, 78.0], [1.586684396E12, 90.0], [1.586684397E12, 78.0], [1.586684403E12, 71.0], [1.586684404E12, 92.0], [1.586684405E12, 70.0], [1.586684401E12, 57.0], [1.586684402E12, 74.0]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [[1.586684415E12, 1.0], [1.586684413E12, 4.0]], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 1000, "maxX": 1.586684415E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "responseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    choiceContainer.find("label").each(function(){
        this.style.color = color;
    });
}

